{"version":3,"sources":["components/TopBar.js","components/Project.js","components/Experience.js","components/Education.js","components/Greetings.js","components/Profile.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["TopBar","props","toggle","bind","state","isOpen","name","this","setState","Navbar","bg","expand","Brand","href","className","Toggle","aria-controls","Collapse","id","React","Component","Project","Container","Row","Col","profile","projects","map","project","i","moment","locale","key","Media","left","top","url","object","src","process","logo","alt","projectName","body","heading","description","Greetings","isDragging","x","y","width","window","innerWidth","height","innerHeight","text","draggable","fill","onDragStart","onDragEnd","e","target","Profile","activeTab","tab","Jumbotron","title","summary","Nav","tabs","NavItem","NavLink","classnames","active","onClick","TabContent","TabPane","tabId","Footer","icon","faLinkedin","faGithub","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.825f501b.chunk.js","sourcesContent":["import React from 'react';\nimport {Nav, Navbar, NavDropdown, Form, FormControl, Button} from 'react-bootstrap';\n\nclass TopBar extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      isOpen: false,\n      name: \"Felix\"\n    };\n  }\n\n  toggle() {\n    this.setState({\n      isOpen: !this.state.isOpen\n    });\n  }\n\n  render() {\n    return (\n    <Navbar bg=\"light\" expand=\"lg\">\n      <Navbar.Brand href=\"#home\">\n      <span className=\"topBar\">{this.state.name}</span>\n      </Navbar.Brand>\n      <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n      <Navbar.Collapse id=\"basic-navbar-nav\">\n      </Navbar.Collapse>\n    </Navbar>\n    );\n  }\n}\n\nexport default TopBar;","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport profile from \"../profile\";\nimport moment from \"moment\";\nimport { Media } from \"reactstrap\";\n\nclass Project extends React.Component {\n  render() {\n    return <Container>\n      <Row>\n        <Col>\n          {profile.projects.map(function (project, i) {\n            moment.locale('en');\n            return (\n              <div key={i}>\n                <Media>\n                  <Media left top href={project.url}>\n                    <Media object src={process.env.PUBLIC_URL+project.logo} alt={project.projectName}/>\n                  </Media>\n                  <Media body>\n                    <Media heading>\n                      <a href={project.url}>{project.projectName}</a>\n                    </Media>\n                      <p className=\"jobDescription\">{project.description}</p>\n                  </Media>\n                </Media>\n              </div>\n            );\n          })}\n        </Col>\n      </Row>\n      \n    </Container>\n  }\n}\n\nexport default Project;","import React from \"react\";\nimport { Container, Row, Col } from \"reactstrap\";\nimport profile from \"../profile\";\nimport moment from \"moment\";\nimport { Media } from \"reactstrap\";\n\nclass Experience extends React.Component {\n  render() {\n    return <Container>\n      <Row>\n        <Col>\n          {profile.experiences.map(function (experience, i) {\n            moment.locale('en');\n            return (\n              <div key={i}>\n                <Media>\n                  <Media left top href={experience.url}>\n                    <Media object src={experience.logo} alt={experience.skillName}/>\n                  </Media>\n                  <Media body>\n                    <Media heading>\n                      <a href={experience.url}>{experience.skillName}</a>\n                    </Media>\n                    {experience.items.map(function (role, i) {\n                      return <div key={i}>\n                        <h5>{role.purpose}</h5>\n                        <span className=\"jobLocation\">{role.location}</span>\n                        <span className=\"jobTotalDuration\">{role.date}</span>\n                        <p className=\"jobDescription\">{role.description}</p>\n                      </div>\n                    })}\n                  </Media>\n                </Media>\n              </div>\n            );\n          })}\n        </Col>\n      </Row>\n      \n    </Container>\n  }\n}\n\nexport default Experience;","import React from 'react';\nimport {Container, Row, Col, Media} from 'reactstrap';\nimport moment from 'moment';\nimport profile from '../profile.json';\n\nclass Education extends React.Component {\n  render() {\n    return <Container>\n      <Row>\n        <Col>\n          {profile.studies.map(function (study, i) {\n            return <Media key={i}>\n              <Media left top href={study.url}>\n                <Media object src={study.logo} alt={study.institute}/>\n              </Media>\n              <Media body>\n                <Media heading>\n                  <a href={study.url}>{study.institute}</a>\n                </Media>\n                {\n                  [\n                    {\n                      \"key\": \"Title\",\n                      \"value\": study.title\n                    },\n                    {\n                      \"key\": \"Graduation Year\",\n                      \"value\": study.graduationYear\n                    },\n                    {\n                      \"key\": \"Duration\",\n                      \"value\": study.durationInYears + \" year(s)\"\n                    }\n                  ].map(function (object, i) {\n                    return <div>\n                      <Row>\n                        <Col className=\"formLabel\">{object.key}:</Col>\n                      </Row>\n                      <Row>\n                        <Col>{object.value}</Col>\n                      </Row>\n                    </div>\n                  })\n                }\n              </Media>\n            </Media>\n          })}\n        </Col>\n      </Row>\n      <br/>\n      <br/>\n      {profile.certifications.length == 0 ? null :\n        <Row>\n          <Col>\n            <h4>Certifications:</h4>\n            <hr/>\n            {profile.certifications.map(function (certification, i) {\n              const verification = certification.verificationLink ?\n                <Row>\n                  <Col>\n                    <a className=\"certificateLink\" href={certification.verificationLink}>See certificate</a>\n                  </Col>\n                </Row> : \"\";\n              return <Media key={i}>\n                <Media left top href={certification.url}>\n                  <Media object src={certification.logo} alt={certification.title}/>\n                </Media>\n                <Media body>\n                  <Media heading>\n                    <a href={certification.url}>{certification.title}</a>\n                  </Media>\n                  <Row>\n                    <Col>{moment(certification.issueDate).format('MMM YYYY')} - {(certification.expiryDate) ? moment(certification.expiryDate).format('MMM YYYY') : 'Present'}</Col>\n                  </Row>\n                  <Row>\n                    <Col>{certification.issuer}</Col>\n                  </Row>\n                  {verification}\n                </Media>\n              </Media>\n            })}\n          </Col>\n        </Row>\n      }\n    </Container>\n  }\n}\n\nexport default Education;","import React from \"react\";\nimport { Container, Row, Col, Media} from \"reactstrap\";\nimport { Stage, Layer, Text } from 'react-konva';\n\nclass Greetings extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isDragging: false,\n            x: 0,\n            y: 10\n        };\n      }\n    render() {\n        return <Container>\n        <Row>\n            <Col>\n            <Media body className=\"greeting\">\n                <Media heading>\n                Welocme to Felix's personal webpage.\n                </Media>\n                This is my personal website for introducing what I have done in the past.\n                <Stage width={window.innerWidth} height={window.innerHeight}>\n                    <Layer>\n                        <Text\n                            text=\"Now thinking how to use konva ~\"\n                            x={this.state.x}\n                            y={this.state.y}\n                            draggable\n                            fill={this.state.isDragging ? 'green' : 'black'}\n                            onDragStart={() => {\n                            this.setState({\n                                isDragging: true\n                            });\n                            }}\n                            onDragEnd={e => {\n                            this.setState({\n                                isDragging: false,\n                                x: e.target.x(),\n                                y: e.target.y()\n                            });\n                            }}\n                        />\n                    </Layer>\n                </Stage>\n            </Media>\n            </Col>\n        </Row>\n        </Container>\n    }\n}\nexport default Greetings;","import React from 'react';\nimport {Jumbotron, Container, TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\nimport classnames from 'classnames';\nimport Experience from \"./Experience\";\nimport Education from './Education';\nimport Project from './Project';\nimport profile from '../profile.json'\nimport Greetings from './Greetings';\n\nclass Profile extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.toggle = this.toggle.bind(this);\n    this.state = {\n      activeTab: '0'\n    };\n  }\n\n  toggle(tab) {\n    if (this.state.activeTab !== tab) {\n      this.setState({\n        activeTab: tab\n      });\n    }\n  }\n\n  render() {\n    return <div>\n      <Jumbotron>\n        <Container>\n          <h1 className=\"display-3\">{profile.title}</h1>\n          <p className=\"lead\">{profile.summary}</p>\n        </Container>\n      </Jumbotron>\n\n      <Container>\n        <Nav tabs>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '0' })}\n                     onClick={() => { this.toggle('0'); }}>\n              Greetings\n            </NavLink>\n          </NavItem>\n          {/* A JSX comment \n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '1' })}\n                     onClick={() => { this.toggle('1'); }}>\n              Coding Experience\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '2' })}\n                     onClick={() => { this.toggle('2'); }}>\n              Education\n            </NavLink>\n          </NavItem>\n          */}\n          <NavItem>\n            <NavLink className={classnames({ active: this.state.activeTab === '3' })}\n                     onClick={() => { this.toggle('3'); }}>\n              Projects\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"0\">\n            <Greetings/>\n          </TabPane>\n          {/*\n          <TabPane tabId=\"1\">\n            <Experience/>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Education/>\n          </TabPane>\n          */}\n          <TabPane tabId=\"3\">\n            <Project/>\n          </TabPane>\n        </TabContent>\n      </Container>\n    </div>;\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport {Container} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons'\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer>\n        <hr/>\n        <Container>\n          <a href=\"https://www.linkedin.com/in/felix-ho-b69878155/\"><FontAwesomeIcon icon={faLinkedin} /></a>\n          <a href=\"https://github.com/Felixho19\"><FontAwesomeIcon icon={faGithub}  /></a>\n        </Container>\n      </footer>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport TopBar from './components/TopBar';\nimport Profile from './components/Profile';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <TopBar />\n        <Profile />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}