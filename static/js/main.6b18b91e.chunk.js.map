{"version":3,"sources":["components/Project.js","components/Banner.js","components/Greetings.js","components/Profile.js","components/Pages.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Project","CardDeck","profile","projects","map","project","i","Card","key","className","style","width","Img","varient","src","process","logo","alt","projectName","Body","Title","href","url","Text","description","Footer","stacks","stack","idx","React","Component","Banner","Jumbotron","Container","Greetings","Row","Col","Profile","Table","striped","bordered","hover","skills","skill","name","items","item","_idx","Pages","props","state","activeTab","toggle","bind","e","this","target","id","setState","Nav","tabs","NavItem","NavLink","onClick","TabContent","TabPane","tabId","icon","faLinkedin","faGithub","App","webSiteName","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6b18b91e.chunk.js","sourcesContent":["import React from \"react\";\nimport profile from \"../profile\";\nimport { Card, CardDeck } from \"react-bootstrap\";\n\nclass Project extends React.Component {\n  render() {\n    return <CardDeck>\n          {profile.projects.map(function (project, i) {\n            return (\n              \n                <Card key={i} className=\"card\" style={{ width: '18rem'}}>\n                    <Card.Img className=\"cardImage\" varient=\"top\" src={process.env.PUBLIC_URL+project.logo} alt={project.projectName}/>\n                    <Card.Body>\n                      <Card.Title><a href={project.url}>{project.projectName}</a></Card.Title>\n                      <Card.Text>{project.description}</Card.Text>\n                    </Card.Body>\n                    <Card.Footer>\n                      <h5>Implemented by</h5>\n                      <ul>\n                        {project.stacks.map((stack, idx) => {\n                          return <li>\n                            {stack}\n                          </li>\n                        })}\n                      </ul>\n                    </Card.Footer>\n                </Card>\n              \n            );\n          })}\n        </CardDeck>\n  }\n}\n\nexport default Project;","import React from 'react';\nimport {Jumbotron, Container } from \"reactstrap\";\n\nexport default function Banner(){\n    return (\n    <Jumbotron>\n        <Container>\n            <h1 className=\"display-3\">Felix Ho</h1>\n            <p className=\"lead\">I am a software developer from Hong Kong</p>\n        </Container>\n    </Jumbotron>\n    );\n}","import React from \"react\";\nimport { Container, Row, Col} from \"reactstrap\";\n\nclass Greetings extends React.Component {\n    render() {\n        return <Container>\n        <Row>\n            <Col className=\"page\">\n                <p>This website is using for exhibiting my worked projects.</p>\n                <p>Feel free to contact me via Linkedin. (Link at the bottom)</p>\n            </Col>\n        </Row>\n        </Container>\n    }\n}\nexport default Greetings;","import React from 'react';\nimport {Table} from 'reactstrap';\nimport profile from \"./profile.json\";\n\nclass Profile extends React.Component {\n  render() {\n    return <div className=\"page\">\n      <h2>Technical Skills</h2>\n      <Table striped bordered hover varient>\n      <thead>\n          <tr>\n              <th>Area</th>\n              <th>Detail</th>\n          </tr>\n      </thead>\n      <tbody>\n          {\n            profile.skills.map((skill, idx) => {\n              return (\n                <tr>\n                  <td>{skill.name}</td>\n                  <td>\n                      <ul>\n                        {\n                          skill.items.map((item, _idx) => {\n                              return <li>{item}</li>\n                          })\n                        }\n                      </ul>\n                  </td>\n                </tr>\n              );\n            })\n          }\n\n      </tbody>\n    </Table>\n  </div>\n  }\n}\n\nexport default Profile;","import React from 'react';\nimport {Container, TabContent, TabPane, Nav, NavItem, NavLink } from \"reactstrap\";\nimport Project from './Project';\nimport Banner from './Banner';\nimport Greetings from './Greetings';\nimport Profile from './Profile';\n\nclass Pages extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      activeTab: '0'\n    };\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle(e){\n    if (this.state.activeTab !== e.target.id) {\n      this.setState({\n        activeTab: e.target.id\n      });\n    }\n  }\n  render() {\n    return <div>\n      <Banner />\n      <Container>\n        <Nav tabs>\n          <NavItem>\n            <NavLink id=\"0\" onClick={this.toggle}>\n              Introduction\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink id=\"1\" onClick={this.toggle}>\n              Selected Projects\n            </NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink id=\"2\" onClick={this.toggle}>\n              Profiles\n            </NavLink>\n          </NavItem>\n        </Nav>\n        <TabContent activeTab={this.state.activeTab}>\n          <TabPane tabId=\"0\">\n            <Greetings/>\n          </TabPane>\n          <TabPane tabId=\"1\">\n            <Project/>\n          </TabPane>\n          <TabPane tabId=\"2\">\n            <Profile/>\n          </TabPane>\n        </TabContent>\n      </Container>\n    </div>;\n  }\n}\n\nexport default Pages;","import React from 'react';\nimport {Container} from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faLinkedin, faGithub } from '@fortawesome/free-brands-svg-icons'\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <footer>\n        <hr/>\n        <Container>\n          <a href=\"https://www.linkedin.com/in/felix-ho-b69878155/\"><FontAwesomeIcon icon={faLinkedin} /></a>\n          <a href=\"https://github.com/Felixho19\"><FontAwesomeIcon icon={faGithub}  /></a>\n        </Container>\n      </footer>\n    )\n  }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport './App.css';\nimport Pages from './components/Pages';\nimport Footer from './components/Footer';\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n       webSiteName : \"Felix's personal website\"\n    };\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Pages />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}